{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"navigation\", \"screenProps\", \"persistNavigationState\", \"loadNavigationState\", \"theme\"];\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport { NavigationActions, ThemeProvider, pathUtils, getNavigation, NavigationProvider } from '@react-navigation/core';\nimport invariant from \"./utils/invariant\";\nimport docsUrl from \"./utils/docsUrl\";\nvar urlToPathAndParams = pathUtils.urlToPathAndParams;\nfunction isStateful(props) {\n  return !props.navigation;\n}\nfunction validateProps(props) {\n  if (props.persistenceKey) {\n    console.warn('You passed persistenceKey prop to a navigator. ' + 'The persistenceKey prop was replaced by a more flexible persistence mechanism, ' + 'please see the navigation state persistence docs for more information. ' + 'Passing the persistenceKey prop is a no-op.');\n  }\n  if (isStateful(props)) {\n    return;\n  }\n  var navigation = props.navigation,\n    screenProps = props.screenProps,\n    persistNavigationState = props.persistNavigationState,\n    loadNavigationState = props.loadNavigationState,\n    theme = props.theme,\n    containerProps = _objectWithoutProperties(props, _excluded);\n  var keys = Object.keys(containerProps);\n  if (keys.length !== 0) {\n    throw new Error('This navigator has both navigation and container props, so it is ' + \"unclear if it should own its own state. Remove props: \\\"\".concat(keys.join(', '), \"\\\" \") + 'if the navigator should get its state from the navigation prop. If the ' + 'navigator should maintain its own state, do not pass a navigation prop.');\n  }\n  invariant(persistNavigationState === undefined && loadNavigationState === undefined || typeof persistNavigationState === 'function' && typeof loadNavigationState === 'function', 'both persistNavigationState and loadNavigationState must either be undefined, or be functions');\n}\nvar _statefulContainerCount = 0;\nexport function _TESTING_ONLY_reset_container_count() {\n  _statefulContainerCount = 0;\n}\nvar _reactNavigationIsHydratingState = false;\nexport default function createNavigationContainer(Component) {\n  var NavigationContainer = function (_React$Component) {\n    function NavigationContainer(props) {\n      var _this;\n      _classCallCheck(this, NavigationContainer);\n      _this = _callSuper(this, NavigationContainer, [props]);\n      _defineProperty(_this, \"subs\", null);\n      _defineProperty(_this, \"_actionEventSubscribers\", new Set());\n      _defineProperty(_this, \"_handleOpenURL\", function (_ref) {\n        var url = _ref.url;\n        var _this$props = _this.props,\n          enableURLHandling = _this$props.enableURLHandling,\n          uriPrefix = _this$props.uriPrefix;\n        if (enableURLHandling === false) {\n          return;\n        }\n        var parsedUrl = urlToPathAndParams(url, uriPrefix);\n        if (parsedUrl) {\n          var path = parsedUrl.path,\n            params = parsedUrl.params;\n          var action = Component.router.getActionForPathAndParams(path, params);\n          if (action) {\n            _this.dispatch(action);\n          }\n        }\n      });\n      _defineProperty(_this, \"_persistNavigationState\", function _callee(nav) {\n        var persistNavigationState;\n        return _regeneratorRuntime.async(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              persistNavigationState = _this.props.persistNavigationState;\n              if (!persistNavigationState) {\n                _context.next = 10;\n                break;\n              }\n              _context.prev = 2;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(persistNavigationState(nav));\n            case 5:\n              _context.next = 10;\n              break;\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](2);\n              console.warn('Uncaught exception while calling persistNavigationState()! You should handle exceptions thrown from persistNavigationState(), ignoring them may result in undefined behavior.');\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }, null, null, [[2, 7]], Promise);\n      });\n      _defineProperty(_this, \"dispatch\", function (action) {\n        if (_this.props.navigation) {\n          return _this.props.navigation.dispatch(action);\n        }\n        _this._navState = _this._navState || _this.state.nav;\n        var lastNavState = _this._navState;\n        invariant(lastNavState, 'should be set in constructor if stateful');\n        var reducedState = Component.router.getStateForAction(action, lastNavState);\n        var navState = reducedState === null ? lastNavState : reducedState;\n        var dispatchActionEvents = function dispatchActionEvents() {\n          _this._actionEventSubscribers.forEach(function (subscriber) {\n            return subscriber({\n              type: 'action',\n              action: action,\n              state: navState,\n              lastState: lastNavState\n            });\n          });\n        };\n        if (reducedState === null) {\n          dispatchActionEvents();\n          return true;\n        }\n        if (navState !== lastNavState) {\n          _this._navState = navState;\n          _this.setState({\n            nav: navState\n          }, function () {\n            _this._onNavigationStateChange(lastNavState, navState, action);\n            dispatchActionEvents();\n            _this._persistNavigationState(navState);\n          });\n          return true;\n        }\n        dispatchActionEvents();\n        return false;\n      });\n      _defineProperty(_this, \"_getScreenProps\", function () {\n        return _this.props.screenProps;\n      });\n      _defineProperty(_this, \"_getTheme\", function () {\n        if (_this.props.theme === 'light' || _this.props.theme === 'dark') {\n          return _this.props.theme;\n        } else if (_this.props.theme === 'no-preference') {\n          return 'light';\n        } else {\n          console.warn(\"Invalid theme provided: \".concat(_this.props.theme, \". Only 'light' and 'dark' are supported. Falling back to 'light'\"));\n          return 'light';\n        }\n      });\n      validateProps(props);\n      _this._initialAction = NavigationActions.init();\n      if (_this._isStateful() && BackHandler && typeof BackHandler.addEventListener === 'function') {\n        _this.subs = BackHandler.addEventListener('hardwareBackPress', function () {\n          if (!_this._isMounted) {\n            _this.subs && _this.subs.remove();\n          } else {\n            return _this.dispatch(NavigationActions.back());\n          }\n        });\n      }\n      _this.state = {\n        nav: _this._isStateful() && !props.loadNavigationState ? Component.router.getStateForAction(_this._initialAction) : null\n      };\n      return _this;\n    }\n    _inherits(NavigationContainer, _React$Component);\n    return _createClass(NavigationContainer, [{\n      key: \"_renderLoading\",\n      value: function _renderLoading() {\n        return this.props.renderLoadingExperimental ? this.props.renderLoadingExperimental() : null;\n      }\n    }, {\n      key: \"_isStateful\",\n      value: function _isStateful() {\n        return isStateful(this.props);\n      }\n    }, {\n      key: \"_onNavigationStateChange\",\n      value: function _onNavigationStateChange(prevNav, nav, action) {\n        if (typeof this.props.onNavigationStateChange === 'undefined' && this._isStateful() && !!process.env.REACT_NAV_LOGGING) {\n          if (console.group) {\n            console.group('Navigation Dispatch: ');\n            console.log('Action: ', action);\n            console.log('New State: ', nav);\n            console.log('Last State: ', prevNav);\n            console.groupEnd();\n          } else {\n            console.log('Navigation Dispatch: ', {\n              action: action,\n              newState: nav,\n              lastState: prevNav\n            });\n          }\n          return;\n        }\n        if (typeof this.props.onNavigationStateChange === 'function') {\n          this.props.onNavigationStateChange(prevNav, nav, action);\n        }\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate() {\n        if (this._navState === this.state.nav) {\n          this._navState = null;\n        }\n      }\n    }, {\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var _this2 = this;\n        var parsedUrl, userProvidedStartupState, _await$this$getStartu, action, startupState, _parsedUrl, path, params, urlAction, dispatchActions;\n        return _regeneratorRuntime.async(function componentDidMount$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              this._isMounted = true;\n              if (this._isStateful()) {\n                _context2.next = 3;\n                break;\n              }\n              return _context2.abrupt(\"return\");\n            case 3:\n              if (process.env.NODE_ENV !== 'production' && !this.props.detached) {\n                if (_statefulContainerCount > 0) {\n                  if (Platform.OS === 'ios') {\n                    console.warn(\"You should only render one navigator explicitly in your app, and other navigators should be rendered by including them in that navigator. Full details at: \".concat(docsUrl('common-mistakes.html#explicitly-rendering-more-than-one-navigator')));\n                  }\n                }\n              }\n              _statefulContainerCount++;\n              this._linkingSub = Linking.addEventListener('url', this._handleOpenURL);\n              parsedUrl = null;\n              userProvidedStartupState = null;\n              if (!(this.props.enableURLHandling !== false)) {\n                _context2.next = 14;\n                break;\n              }\n              _context2.next = 11;\n              return _regeneratorRuntime.awrap(this.getStartupParams());\n            case 11:\n              _await$this$getStartu = _context2.sent;\n              parsedUrl = _await$this$getStartu.parsedUrl;\n              userProvidedStartupState = _await$this$getStartu.userProvidedStartupState;\n            case 14:\n              action = this._initialAction;\n              startupState = this.state.nav;\n              if (!startupState && !userProvidedStartupState) {\n                !!process.env.REACT_NAV_LOGGING && console.log('Init new Navigation State');\n                startupState = Component.router.getStateForAction(action);\n              }\n              if (userProvidedStartupState) {\n                startupState = userProvidedStartupState;\n                _reactNavigationIsHydratingState = true;\n              }\n              if (parsedUrl) {\n                _parsedUrl = parsedUrl, path = _parsedUrl.path, params = _parsedUrl.params;\n                urlAction = Component.router.getActionForPathAndParams(path, params);\n                if (urlAction) {\n                  !!process.env.REACT_NAV_LOGGING && console.log('Applying Navigation Action for Initial URL:', parsedUrl);\n                  action = urlAction;\n                  startupState = Component.router.getStateForAction(urlAction, startupState);\n                }\n              }\n              dispatchActions = function dispatchActions() {\n                return _this2._actionEventSubscribers.forEach(function (subscriber) {\n                  return subscriber({\n                    type: 'action',\n                    action: action,\n                    state: _this2.state.nav,\n                    lastState: null\n                  });\n                });\n              };\n              if (!(startupState === this.state.nav)) {\n                _context2.next = 23;\n                break;\n              }\n              dispatchActions();\n              return _context2.abrupt(\"return\");\n            case 23:\n              this.setState({\n                nav: startupState\n              }, function () {\n                _reactNavigationIsHydratingState = false;\n                dispatchActions();\n              });\n            case 24:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, null, this, null, Promise);\n      }\n    }, {\n      key: \"getStartupParams\",\n      value: function getStartupParams() {\n        var _this$props2, uriPrefix, loadNavigationState, url, loadedNavState, _await$Promise$all, _await$Promise$all2;\n        return _regeneratorRuntime.async(function getStartupParams$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _this$props2 = this.props, uriPrefix = _this$props2.uriPrefix, loadNavigationState = _this$props2.loadNavigationState;\n              _context3.prev = 1;\n              _context3.next = 4;\n              return _regeneratorRuntime.awrap(Promise.all([Linking.getInitialURL(), loadNavigationState && loadNavigationState()]));\n            case 4:\n              _await$Promise$all = _context3.sent;\n              _await$Promise$all2 = _slicedToArray(_await$Promise$all, 2);\n              url = _await$Promise$all2[0];\n              loadedNavState = _await$Promise$all2[1];\n              _context3.next = 12;\n              break;\n            case 10:\n              _context3.prev = 10;\n              _context3.t0 = _context3[\"catch\"](1);\n            case 12:\n              return _context3.abrupt(\"return\", {\n                parsedUrl: url && urlToPathAndParams(url, uriPrefix),\n                userProvidedStartupState: loadedNavState\n              });\n            case 13:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, null, this, [[1, 10]], Promise);\n      }\n    }, {\n      key: \"componentDidCatch\",\n      value: function componentDidCatch(e) {\n        if (_reactNavigationIsHydratingState) {\n          _reactNavigationIsHydratingState = false;\n          console.warn('Uncaught exception while starting app from persisted navigation state! Trying to render again with a fresh navigation state...');\n          this.dispatch(NavigationActions.init());\n        } else {\n          throw e;\n        }\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        var _this$_linkingSub;\n        this._isMounted = false;\n        if ((_this$_linkingSub = this._linkingSub) === null || _this$_linkingSub === void 0 ? void 0 : _this$_linkingSub.remove) {\n          var _this$_linkingSub2;\n          (_this$_linkingSub2 = this._linkingSub) === null || _this$_linkingSub2 === void 0 ? void 0 : _this$_linkingSub2.remove();\n        } else {\n          Linking.removeEventListener('url', this._handleOpenURL);\n        }\n        this.subs && this.subs.remove();\n        if (this._isStateful()) {\n          _statefulContainerCount--;\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this3 = this;\n        var navigation = this.props.navigation;\n        if (this._isStateful()) {\n          var navState = this.state.nav;\n          if (!navState) {\n            return this._renderLoading();\n          }\n          if (!this._navigation || this._navigation.state !== navState) {\n            this._navigation = getNavigation(Component.router, navState, this.dispatch, this._actionEventSubscribers, this._getScreenProps, function () {\n              return _this3._navigation;\n            });\n          }\n          navigation = this._navigation;\n        }\n        invariant(navigation, 'failed to get navigation');\n        return React.createElement(ThemeProvider, {\n          value: this._getTheme()\n        }, React.createElement(NavigationProvider, {\n          value: navigation\n        }, React.createElement(Component, _extends({}, this.props, {\n          navigation: navigation\n        }))));\n      }\n    }], [{\n      key: \"getDerivedStateFromProps\",\n      value: function getDerivedStateFromProps(nextProps) {\n        validateProps(nextProps);\n        return null;\n      }\n    }]);\n  }(React.Component);\n  _defineProperty(NavigationContainer, \"router\", Component.router);\n  _defineProperty(NavigationContainer, \"navigationOptions\", null);\n  _defineProperty(NavigationContainer, \"defaultProps\", {\n    theme: 'light'\n  });\n  return NavigationContainer;\n}","map":{"version":3,"names":["React","Linking","Platform","BackHandler","NavigationActions","ThemeProvider","pathUtils","getNavigation","NavigationProvider","invariant","docsUrl","urlToPathAndParams","isStateful","props","navigation","validateProps","persistenceKey","console","warn","screenProps","persistNavigationState","loadNavigationState","theme","containerProps","_objectWithoutProperties","_excluded","keys","Object","length","Error","concat","join","undefined","_statefulContainerCount","_TESTING_ONLY_reset_container_count","_reactNavigationIsHydratingState","createNavigationContainer","Component","NavigationContainer","_React$Component","_this","_classCallCheck","_callSuper","_defineProperty","Set","_ref","url","_this$props","enableURLHandling","uriPrefix","parsedUrl","path","params","action","router","getActionForPathAndParams","dispatch","_callee","nav","_regeneratorRuntime","async","_callee$","_context","prev","next","awrap","t0","stop","Promise","_navState","state","lastNavState","reducedState","getStateForAction","navState","dispatchActionEvents","_actionEventSubscribers","forEach","subscriber","type","lastState","setState","_onNavigationStateChange","_persistNavigationState","_initialAction","init","_isStateful","addEventListener","subs","_isMounted","remove","back","_inherits","_createClass","key","value","_renderLoading","renderLoadingExperimental","prevNav","onNavigationStateChange","process","env","REACT_NAV_LOGGING","group","log","groupEnd","newState","componentDidUpdate","componentDidMount","_this2","userProvidedStartupState","_await$this$getStartu","startupState","_parsedUrl","urlAction","dispatchActions","componentDidMount$","_context2","abrupt","NODE_ENV","detached","OS","_linkingSub","_handleOpenURL","getStartupParams","sent","_this$props2","loadedNavState","_await$Promise$all","_await$Promise$all2","getStartupParams$","_context3","all","getInitialURL","_slicedToArray","componentDidCatch","e","componentWillUnmount","_this$_linkingSub","_this$_linkingSub2","removeEventListener","render","_this3","_navigation","_getScreenProps","createElement","_getTheme","_extends","getDerivedStateFromProps","nextProps"],"sources":["C:\\Users\\reyno\\OneDrive\\Escritorio\\music-player-ui-improvements\\node_modules\\@react-navigation\\native\\lib\\module\\createAppContainer.js"],"sourcesContent":["/* eslint-disable react/sort-comp */\n\nimport * as React from 'react';\nimport { Linking, Platform, BackHandler } from 'react-native';\nimport {\n  NavigationActions,\n  ThemeProvider,\n  pathUtils,\n  getNavigation,\n  NavigationProvider,\n} from '@react-navigation/core';\nimport invariant from './utils/invariant';\nimport docsUrl from './utils/docsUrl';\n\nconst { urlToPathAndParams } = pathUtils;\n\nfunction isStateful(props) {\n  return !props.navigation;\n}\n\nfunction validateProps(props) {\n  if (props.persistenceKey) {\n    console.warn(\n      'You passed persistenceKey prop to a navigator. ' +\n        'The persistenceKey prop was replaced by a more flexible persistence mechanism, ' +\n        'please see the navigation state persistence docs for more information. ' +\n        'Passing the persistenceKey prop is a no-op.'\n    );\n  }\n  if (isStateful(props)) {\n    return;\n  }\n  /* eslint-disable no-unused-vars */\n  const {\n    navigation,\n    screenProps,\n    persistNavigationState,\n    loadNavigationState,\n    theme,\n    ...containerProps\n  } = props;\n  /* eslint-enable no-unused-vars */\n\n  const keys = Object.keys(containerProps);\n\n  if (keys.length !== 0) {\n    throw new Error(\n      'This navigator has both navigation and container props, so it is ' +\n        `unclear if it should own its own state. Remove props: \"${keys.join(\n          ', '\n        )}\" ` +\n        'if the navigator should get its state from the navigation prop. If the ' +\n        'navigator should maintain its own state, do not pass a navigation prop.'\n    );\n  }\n  invariant(\n    (persistNavigationState === undefined &&\n      loadNavigationState === undefined) ||\n      (typeof persistNavigationState === 'function' &&\n        typeof loadNavigationState === 'function'),\n    'both persistNavigationState and loadNavigationState must either be undefined, or be functions'\n  );\n}\n\n// Track the number of stateful container instances. Warn if >0 and not using the\n// detached prop to explicitly acknowledge the behavior. We should deprecated implicit\n// stateful navigation containers in a future release and require a provider style pattern\n// instead in order to eliminate confusion entirely.\nlet _statefulContainerCount = 0;\nexport function _TESTING_ONLY_reset_container_count() {\n  _statefulContainerCount = 0;\n}\n\n// We keep a global flag to catch errors during the state persistence hydrating scenario.\n// The innermost navigator who catches the error will dispatch a new init action.\nlet _reactNavigationIsHydratingState = false;\n// Unfortunate to use global state here, but it seems necessesary for the time\n// being. There seems to be some problems with cascading componentDidCatch\n// handlers. Ideally the inner non-stateful navigator catches the error and\n// re-throws it, to be caught by the top-level stateful navigator.\n\n/**\n * Create an HOC that injects the navigation and manages the navigation state\n * in case it's not passed from above.\n * This allows to use e.g. the StackNavigator and TabNavigator as root-level\n * components.\n */\nexport default function createNavigationContainer(Component) {\n  class NavigationContainer extends React.Component {\n    subs = null;\n\n    static router = Component.router;\n    static navigationOptions = null;\n\n    static defaultProps = {\n      theme: 'light',\n    };\n\n    static getDerivedStateFromProps(nextProps) {\n      validateProps(nextProps);\n      return null;\n    }\n\n    _actionEventSubscribers = new Set();\n\n    constructor(props) {\n      super(props);\n\n      validateProps(props);\n\n      this._initialAction = NavigationActions.init();\n\n      if (\n        this._isStateful() &&\n        BackHandler &&\n        typeof BackHandler.addEventListener === 'function'\n      ) {\n        this.subs = BackHandler.addEventListener('hardwareBackPress', () => {\n          if (!this._isMounted) {\n            this.subs && this.subs.remove();\n          } else {\n            // dispatch returns true if the action results in a state change,\n            // and false otherwise. This maps well to what BackHandler expects\n            // from a callback -- true if handled, false if not handled\n            return this.dispatch(NavigationActions.back());\n          }\n        });\n      }\n\n      this.state = {\n        nav:\n          this._isStateful() && !props.loadNavigationState\n            ? Component.router.getStateForAction(this._initialAction)\n            : null,\n      };\n    }\n\n    _renderLoading() {\n      return this.props.renderLoadingExperimental\n        ? this.props.renderLoadingExperimental()\n        : null;\n    }\n\n    _isStateful() {\n      return isStateful(this.props);\n    }\n\n    _handleOpenURL = ({ url }) => {\n      const { enableURLHandling, uriPrefix } = this.props;\n      if (enableURLHandling === false) {\n        return;\n      }\n      const parsedUrl = urlToPathAndParams(url, uriPrefix);\n      if (parsedUrl) {\n        const { path, params } = parsedUrl;\n        const action = Component.router.getActionForPathAndParams(path, params);\n        if (action) {\n          this.dispatch(action);\n        }\n      }\n    };\n\n    _onNavigationStateChange(prevNav, nav, action) {\n      if (\n        typeof this.props.onNavigationStateChange === 'undefined' &&\n        this._isStateful() &&\n        !!process.env.REACT_NAV_LOGGING\n      ) {\n        if (console.group) {\n          console.group('Navigation Dispatch: ');\n          console.log('Action: ', action);\n          console.log('New State: ', nav);\n          console.log('Last State: ', prevNav);\n          console.groupEnd();\n        } else {\n          console.log('Navigation Dispatch: ', {\n            action,\n            newState: nav,\n            lastState: prevNav,\n          });\n        }\n        return;\n      }\n\n      if (typeof this.props.onNavigationStateChange === 'function') {\n        this.props.onNavigationStateChange(prevNav, nav, action);\n      }\n    }\n\n    componentDidUpdate() {\n      // Clear cached _navState every tick\n      if (this._navState === this.state.nav) {\n        this._navState = null;\n      }\n    }\n\n    async componentDidMount() {\n      this._isMounted = true;\n      if (!this._isStateful()) {\n        return;\n      }\n\n      if (process.env.NODE_ENV !== 'production' && !this.props.detached) {\n        if (_statefulContainerCount > 0) {\n          // Temporarily only show this on iOS due to this issue:\n          // https://github.com/react-navigation/react-navigation/issues/4196#issuecomment-390827829\n          if (Platform.OS === 'ios') {\n            console.warn(\n              `You should only render one navigator explicitly in your app, and other navigators should be rendered by including them in that navigator. Full details at: ${docsUrl(\n                'common-mistakes.html#explicitly-rendering-more-than-one-navigator'\n              )}`\n            );\n          }\n        }\n      }\n      _statefulContainerCount++;\n      this._linkingSub = Linking.addEventListener('url', this._handleOpenURL);\n\n      // Pull out anything that can impact state\n      let parsedUrl = null;\n      let userProvidedStartupState = null;\n      if (this.props.enableURLHandling !== false) {\n        ({\n          parsedUrl,\n          userProvidedStartupState,\n        } = await this.getStartupParams());\n      }\n\n      // Initialize state. This must be done *after* any async code\n      // so we don't end up with a different value for this.state.nav\n      // due to changes while async function was resolving\n      let action = this._initialAction;\n      // eslint-disable-next-line react/no-access-state-in-setstate\n      let startupState = this.state.nav;\n      if (!startupState && !userProvidedStartupState) {\n        !!process.env.REACT_NAV_LOGGING &&\n          console.log('Init new Navigation State');\n        startupState = Component.router.getStateForAction(action);\n      }\n\n      // Pull user-provided persisted state\n      if (userProvidedStartupState) {\n        startupState = userProvidedStartupState;\n        _reactNavigationIsHydratingState = true;\n      }\n\n      // Pull state out of URL\n      if (parsedUrl) {\n        const { path, params } = parsedUrl;\n        const urlAction = Component.router.getActionForPathAndParams(\n          path,\n          params\n        );\n        if (urlAction) {\n          !!process.env.REACT_NAV_LOGGING &&\n            console.log(\n              'Applying Navigation Action for Initial URL:',\n              parsedUrl\n            );\n          action = urlAction;\n          startupState = Component.router.getStateForAction(\n            urlAction,\n            startupState\n          );\n        }\n      }\n\n      const dispatchActions = () =>\n        this._actionEventSubscribers.forEach((subscriber) =>\n          subscriber({\n            type: 'action',\n            action,\n            state: this.state.nav,\n            lastState: null,\n          })\n        );\n\n      if (startupState === this.state.nav) {\n        dispatchActions();\n        return;\n      }\n\n      // eslint-disable-next-line react/no-did-mount-set-state\n      this.setState({ nav: startupState }, () => {\n        _reactNavigationIsHydratingState = false;\n        dispatchActions();\n      });\n    }\n\n    async getStartupParams() {\n      const { uriPrefix, loadNavigationState } = this.props;\n      let url, loadedNavState;\n      try {\n        [url, loadedNavState] = await Promise.all([\n          Linking.getInitialURL(),\n          loadNavigationState && loadNavigationState(),\n        ]);\n      } catch (err) {\n        // ignore\n      }\n      return {\n        parsedUrl: url && urlToPathAndParams(url, uriPrefix),\n        userProvidedStartupState: loadedNavState,\n      };\n    }\n\n    componentDidCatch(e) {\n      if (_reactNavigationIsHydratingState) {\n        _reactNavigationIsHydratingState = false;\n        console.warn(\n          'Uncaught exception while starting app from persisted navigation state! Trying to render again with a fresh navigation state...'\n        );\n        this.dispatch(NavigationActions.init());\n      } else {\n        throw e;\n      }\n    }\n\n    _persistNavigationState = async (nav) => {\n      const { persistNavigationState } = this.props;\n      if (persistNavigationState) {\n        try {\n          await persistNavigationState(nav);\n        } catch (err) {\n          console.warn(\n            'Uncaught exception while calling persistNavigationState()! You should handle exceptions thrown from persistNavigationState(), ignoring them may result in undefined behavior.'\n          );\n        }\n      }\n    };\n\n    componentWillUnmount() {\n      this._isMounted = false;\n\n      // https://github.com/facebook/react-native/commit/6d1aca806cee86ad76de771ed3a1cc62982ebcd7\n      if (this._linkingSub?.remove) {\n        this._linkingSub?.remove();\n      } else {\n        Linking.removeEventListener('url', this._handleOpenURL);\n      }\n\n      this.subs && this.subs.remove();\n\n      if (this._isStateful()) {\n        _statefulContainerCount--;\n      }\n    }\n\n    // Per-tick temporary storage for state.nav\n\n    dispatch = (action) => {\n      if (this.props.navigation) {\n        return this.props.navigation.dispatch(action);\n      }\n\n      // navState will have the most up-to-date value, because setState sometimes behaves asyncronously\n      this._navState = this._navState || this.state.nav;\n      const lastNavState = this._navState;\n      invariant(lastNavState, 'should be set in constructor if stateful');\n      const reducedState = Component.router.getStateForAction(\n        action,\n        lastNavState\n      );\n      const navState = reducedState === null ? lastNavState : reducedState;\n\n      const dispatchActionEvents = () => {\n        this._actionEventSubscribers.forEach((subscriber) =>\n          subscriber({\n            type: 'action',\n            action,\n            state: navState,\n            lastState: lastNavState,\n          })\n        );\n      };\n\n      if (reducedState === null) {\n        // The router will return null when action has been handled and the state hasn't changed.\n        // dispatch returns true when something has been handled.\n        dispatchActionEvents();\n        return true;\n      }\n\n      if (navState !== lastNavState) {\n        // Cache updates to state.nav during the tick to ensure that subsequent calls will not discard this change\n        this._navState = navState;\n        this.setState({ nav: navState }, () => {\n          this._onNavigationStateChange(lastNavState, navState, action);\n          dispatchActionEvents();\n          this._persistNavigationState(navState);\n        });\n        return true;\n      }\n\n      dispatchActionEvents();\n      return false;\n    };\n\n    _getScreenProps = () => this.props.screenProps;\n\n    _getTheme = () => {\n      if (this.props.theme === 'light' || this.props.theme === 'dark') {\n        return this.props.theme;\n      } else if (this.props.theme === 'no-preference') {\n        return 'light';\n      } else {\n        console.warn(\n          `Invalid theme provided: ${this.props.theme}. Only 'light' and 'dark' are supported. Falling back to 'light'`\n        );\n        return 'light';\n      }\n    };\n\n    render() {\n      let navigation = this.props.navigation;\n      if (this._isStateful()) {\n        const navState = this.state.nav;\n        if (!navState) {\n          return this._renderLoading();\n        }\n        if (!this._navigation || this._navigation.state !== navState) {\n          this._navigation = getNavigation(\n            Component.router,\n            navState,\n            this.dispatch,\n            this._actionEventSubscribers,\n            this._getScreenProps,\n            () => this._navigation\n          );\n        }\n        navigation = this._navigation;\n      }\n      invariant(navigation, 'failed to get navigation');\n\n      return (\n        <ThemeProvider value={this._getTheme()}>\n          <NavigationProvider value={navigation}>\n            <Component {...this.props} navigation={navigation} />\n          </NavigationProvider>\n        </ThemeProvider>\n      );\n    }\n  }\n\n  return NavigationContainer;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}